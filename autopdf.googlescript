/**
 * A production-grade script to automatically find and save specific email attachments.
 * v16: Corrects the "sanity check" logic to ensure the daily counter resets
 * when files are manually deleted for testing.
 *
 * @OnlyCurrentDoc
 */

// --- 1. CORE CONFIGURATION ---
const ROOT_FOLDER_ID = 'YOUR_ID_HERE';

// --- 2. PUSHCUT NOTIFICATION CONFIGURATION (OPTIONAL) ---
const PUSHCUT_CONFIG = {
  ENABLED: false,
  WEBHOOK_URL: 'PUSHCUT_WEBHOOK_HERE',
  GEMINI_GEM_URL: 'GEM_URL_HERE'
};

// --- 3. DOCUMENT RULES ---
const FILE_RULES = {
  'callsheet.pdf': { keywords: ['call sheet', 'callsheet', 'CS'], folderName: 'Call Sheets' },
  'movementorder.pdf': { keywords: ['Movement Order', 'MO'], folderName: 'Movement Orders' },
  'prepdiary.pdf': { keywords: ['prep diary', 'prepdiary'], folderName: 'Prep Diaries' },
  'unitlist.pdf': { keywords: ['unit list', 'unitlist'], folderName: 'Unit Lists' }
};

// --- WEB APP FUNCTION ---
function doGet(e) {
  const filename = e.parameter.filename;
  if (!filename) { return ContentService.createTextOutput("Error: A 'filename' parameter is required."); }
  try {
    const rootFolder = DriveApp.getFolderById(ROOT_FOLDER_ID);
    const files = rootFolder.getFilesByName(filename);
    if (files.hasNext()) {
      const file = files.next();
      return ContentService.createTextOutput(file.getUrl());
    } else {
      return ContentService.createTextOutput(`Error: File not found: ${filename}`);
    }
  } catch (err) {
    return ContentService.createTextOutput(`Error: An exception occurred: ${err.message}`);
  }
}

// --- MAIN SCRIPT LOGIC ---
function saveMostRecentAttachments() {
  const lock = LockService.getScriptLock();
  if (!lock.tryLock(30000)) { return; }
  
  try {
    const rootFolder = DriveApp.getFolderById(ROOT_FOLDER_ID);
    const folderCache = {};
    folderCache[ROOT_FOLDER_ID] = rootFolder;
    const scriptProperties = PropertiesService.getScriptProperties();
    
    // --- NEW: State Initialization & Sanity Check ---
    const today = new Date().toLocaleDateString('en-CA'); // YYYY-MM-DD format
    const lastRunDate = scriptProperties.getProperty('lastRunDate');
    let isNewDay = (today !== lastRunDate);
    let dailyCallsheetCount = 0;
    let needsArchiving = isNewDay;

    if (isNewDay) {
      console.log("New day detected. Archiving will be triggered by the first new call sheet.");
    } else {
      // It's the same day, perform the sanity check.
      if (!rootFolder.getFilesByName('callsheet1.pdf').hasNext()) {
        console.log("Sanity Check: 'callsheet1.pdf' is missing. Forcing counter reset.");
        dailyCallsheetCount = 0;
        scriptProperties.setProperty('dailyCallsheetCount', '0');
      } else {
        dailyCallsheetCount = parseInt(scriptProperties.getProperty('dailyCallsheetCount') || '0', 10);
      }
    }
    // --- END: State Initialization ---

    const searchQuery = 'is:unread has:attachment filename:pdf';
    const threads = GmailApp.search(searchQuery);

    if (threads.length === 0) { console.log("No new emails to process."); return; }

    threads.forEach(thread => {
      const messages = thread.getMessages();
      let threadMarkedAsRead = false;
      
      messages.reverse().forEach(message => {
        if (!message.isUnread()) return;
        
        let callSheetNumberForThisEmail = 0;
        let processedTypesForMessage = new Set();
        
        const attachments = message.getAttachments();
        const exclusionKeywords = ['preliminary', 'prelim'];
        const subjectLower = message.getSubject().toLowerCase();
        const bodyLower = message.getPlainBody().toLowerCase();
        
        const attachmentsToProcess = attachments.filter(attachment => {
            if (attachment.getContentType() !== 'application/pdf') return false;
            const attachmentNameLower = attachment.getName().toLowerCase();
            const isPreliminary = exclusionKeywords.some(keyword => attachmentNameLower.includes(keyword) || subjectLower.includes(keyword) || bodyLower.includes(keyword));
            if (isPreliminary) { console.log(`Skipping preliminary document: '${attachment.getName()}'`); }
            return !isPreliminary;
        });

        // First pass: Find a call sheet
        attachmentsToProcess.forEach(attachment => {
          const attachmentName = attachment.getName();
          const baseFilename = 'callsheet.pdf';
          if (processedTypesForMessage.has(baseFilename)) return;

          const rule = FILE_RULES[baseFilename];
          const foundKeyword = rule.keywords.find(keyword => {
            const regex = new RegExp(`(^|[^A-Za-z0-9])${keyword.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}([^A-Za-z0-9]|$)`, 'i');
            return regex.test(attachmentName);
          });

          if (foundKeyword) {
            if (needsArchiving) {
              console.log(`First call sheet of the new day found. Performing archive now.`);
              const fileSearchQuery = "(title contains 'callsheet' or title contains 'movementorder') and mimeType = 'application/pdf'";
              const oldNumberedFiles = rootFolder.searchFiles(fileSearchQuery);
              while (oldNumberedFiles.hasNext()) {
                const oldFile = oldNumberedFiles.next();
                const ruleKey = Object.keys(FILE_RULES).find(key => oldFile.getName().includes(key.replace('.pdf','')));
                if (ruleKey) {
                    const archiveFolder = getOrCreateSubfolder(rootFolder, FILE_RULES[ruleKey].folderName, folderCache);
                    const timestamp = new Date().toISOString().replace(/:/g, '-').slice(0, 19);
                    const oldFilename = `${oldFile.getName().replace('.pdf', '')}_${timestamp}.pdf`;
                    oldFile.moveTo(archiveFolder).setName(oldFilename);
                }
              }
              scriptProperties.setProperty('lastRunDate', today);
              needsArchiving = false; // Ensure archiving only happens once per run
            }
            
            dailyCallsheetCount++;
            callSheetNumberForThisEmail = dailyCallsheetCount;
            const newCallsheetName = `callsheet${callSheetNumberForThisEmail}.pdf`;
            console.log(`   └─> Saving as sequential file: ${newCallsheetName}`);
            const newFile = rootFolder.createFile(attachment.copyBlob()).setName(newCallsheetName);
            scriptProperties.setProperty('dailyCallsheetCount', dailyCallsheetCount);
            processedTypesForMessage.add(baseFilename); 
            
            if (PUSHCUT_CONFIG.ENABLED) { /* ... notification logic ... */ }
          }
        });

        // Second pass: Process other documents
        attachmentsToProcess.forEach(attachment => {
          const attachmentName = attachment.getName();
          for (const baseFilename in FILE_RULES) {
            if (baseFilename === 'callsheet.pdf' || processedTypesForMessage.has(baseFilename)) continue;
            
            const rule = FILE_RULES[baseFilename];
            const foundKeyword = rule.keywords.find(keyword => { /* ... regex ... */ });

            if (foundKeyword) {
              if (baseFilename === 'movementorder.pdf' && callSheetNumberForThisEmail > 0) {
                const newMovementOrderName = `movementorder${callSheetNumberForThisEmail}.pdf`;
                console.log(`   └─> Saving synchronized Movement Order: ${newMovementOrderName}`);
                rootFolder.createFile(attachment.copyBlob()).setName(newMovementOrderName);
              } else {
                const oldVersionsFolder = getOrCreateSubfolder(rootFolder, rule.folderName, folderCache);
                processFile(rootFolder, oldVersionsFolder, baseFilename, attachment);
              }
              processedTypesForMessage.add(baseFilename);
            }
          }
        });

        if (processedTypesForMessage.size > 0) { threadMarkedAsRead = true; }
      });
      
      if (threadMarkedAsRead) { thread.markRead(); }
    });
  } catch (e) {
    console.error("An error occurred: " + e.stack);
  } finally {
    lock.releaseLock();
  }
}

// --- HELPER FUNCTIONS ---
function sendPushcutNotification(title, message, primaryUrl, geminiUrl, primaryActionName = "Open PDF") {
  if (!PUSHCUT_CONFIG.ENABLED || !PUSHCUT_CONFIG.WEBHOOK_URL) { return; }
  const payload = { "title": title, "text": message, "actions": [ { "name": primaryActionName, "input": primaryUrl }, { "name": "Plan Travel", "input": geminiUrl } ] };
  const options = { method: "post", contentType: "application/json", payload: JSON.stringify(payload) };
  try { UrlFetchApp.fetch(PUSHCUT_CONFIG.WEBHOOK_URL, options); console.log("       └─> Pushcut notification sent successfully."); } catch (e) { console.error("Failed to send Pushcut notification: " + e.toString()); }
}

function processFile(latestFileFolder, oldVersionsFolder, targetFilename, attachment) {
  const existingFiles = latestFileFolder.getFilesByName(targetFilename);
  if (existingFiles.hasNext()) {
    const oldFile = existingFiles.next();
    const timestamp = new Date().toISOString().replace(/:/g, '-').slice(0, 19);
    const oldFilename = `${targetFilename.replace('.pdf', '')}_${timestamp}.pdf`;
    oldFile.moveTo(oldVersionsFolder).setName(oldFilename);
  }
  return latestFileFolder.createFile(attachment.copyBlob()).setName(targetFilename);
}

function getOrCreateSubfolder(parentFolder, folderName, cache) {
  const cacheKey = parentFolder.getId() + '_' + folderName;
  if (cache[cacheKey]) { return cache[cacheKey]; }
  const folders = parentFolder.getFoldersByName(folderName);
  if (folders.hasNext()) { const folder = folders.next(); cache[cacheKey] = folder; return folder; }
  const newFolder = parentFolder.createFolder(folderName); cache[cacheKey] = newFolder; return newFolder;
}
